type Query {
  users: [User!]
  user: User!
  courses(filter: CourseFilter): [Course!]!
  coursesForContribute(filter: CourseFilter): [Course!]!
  course(courseID: ID!): Course!
  exams(courseID: ID!): [Exam!]!
  examsForContribute(courseID: ID!): [Exam!]!
  exam(courseID: ID!, examName: String!): Exam!
  files(examID: ID!): [File!]!
  file(examID: ID!, fileID: ID!): File!
}

type Mutation {
  createCourse(data: CreateCourseInput!): Course!
  updateCourse(courseID: ID!, data: UpdateCourseInput!): Course!
  deleteCourse(courseID: ID!): Boolean
  createExam(data: CreateExamInput!, courseID: ID!): Exam!
  updateExam(examID: ID!, data: UpdateExamInput!): Exam!
  deleteExam(examID: ID!): Boolean
  createFile(examID: ID!, data: CreateFileInput!): File!
  updateFile(fileID: ID!, data: UpdateFileInput!): File!
  deleteFile(fileID: ID!): Boolean
}

type Subscription{
  course: CourseSubscriptionPayload!
  exam(courseID: ID!): ExamSubscriptionPayload!
  file(examID: ID!): FileSubscriptionPayload!
}


type User {
  id: ID!
  userID: String! 
}

type Course {
  id: ID!
  year: Int!
  semester: String!
  courseName: String!
  instructors: String!
  department: String!
  courseType: String!
  exams: [Exam!]!
  show: Boolean!
}

type Exam {
  id: ID!
  courseID: ID!
  examName: String!
  examTime: Int!
  files: [File!]!
  show: Boolean!
}

type File{
  id: ID!
  examID: ID!
  questionDriveID: ID!
  questionDownloadLink: String!
  questionViewLink: String!
  answerDriveID: ID
  answerDownloadLink: String
  answerViewLink: String
  uploadTime: Int!
  pass: Boolean!
  show: Boolean!
  remarks: String 
}

input CreateCourseInput {
  year: Int!
  semester: String!
  courseName: String!
  instructors: String!
  department: String!
  courseType: String!
}

input UpdateCourseInput {
  year: Int
  semester: String
  courseName: String
  instructors: String!
  department: String
  courseType: String
  show: Boolean
}

input CourseFilter {
  year:Int
  semester: String
  courseName: String
  department: String
  courseType: String
}

input CreateExamInput {
  examName: String!
  examTime: Int!
}

input UpdateExamInput {
  examName: String
  examTime: Int
  show: Boolean
}

input CreateFileInput {
  questionDriveID: ID!
  questionDownloadLink: String!
  questionViewLink: String!
  answerDriveID: ID
  answerDownloadLink: String
  answerViewLink: String
  remarks: String
}

input UpdateFileInput {
  questionDriveID: ID
  questionDownloadLink: String
  questionViewLink: String
  answerDriveID: ID
  answerDownloadLink: String
  answerViewLink: String
  pass: Boolean
  show: Boolean
  remarks: String
}

enum MutationType{
  CREATED
  UPDATED
  DELETED
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  courseID: ID!
  data: Course
}

type ExamSubscriptionPayload {
  mutation: MutationType!
  courseID: ID!
  examID: ID!
  data: Exam
}

type FileSubscriptionPayload {
  mutation: MutationType!
  examID: ID!
  fileID: ID!
  data: File
}


